{
  "metadata": {
    "name": "JS Contest",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n        <br><h1  style=\"color:#555\">To-Do List </h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n     JS Challenge on Scribbler!!\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n        <br><h1 style=\"color:#555\">To-Do List </h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n     JS Challenge on Scribbler!!\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "Welcome to the To-Do Application Debugging and Enhancement Contest! Participants will start with a simple Scribbler notebook containing a basic To-Do application, complete with intentional bugs. The challenge is to identify and fix these bugs, then enhance the application with new features such as task prioritization, timestamping, editing functionality, and improved styling. Once you've perfected your application, push your changes to a GitHub repository and share the link. This contest is an opportunity to showcase your problem-solving skills, creativity, and mastery of JavaScript and HTML. Happy coding!",
      "status": "",
      "output": "Welcome to the To-Do Application Debugging and Enhancement Contest! Participants will start with a simple Scribbler notebook containing a basic To-Do application, complete with intentional bugs. The challenge is to identify and fix these bugs, then enhance the application with new features such as task prioritization, timestamping, editing functionality, and improved styling. Once you've perfected your application, push your changes to a GitHub repository and share the link. This contest is an opportunity to showcase your problem-solving skills, creativity, and mastery of JavaScript and HTML. Happy coding!",
      "type": "html"
    },
    {
      "code": "<h2>Instructions</h2>\nThis is a contest on JavaScript using Scribbler. For details on using Scribbler check out: <a target='_blank' href='https://scribbler.live/docs'>Docs</a>. Follow the instructions and win badges for fastest JS coders and most innovative JS coders. \n<h3>The Application</h3>\n<ol>\n  <li>Next two cells contain HTML and JS for a To-Do application</li>\n <li>Double click on the HTML cell to see the html code</li>\n <li>Press play button at the top right corner to run the code in the cell</li>\n  <li>Enter text in the input box for Task and press button \"Add Task\"</li>\n  <li>The application is supposed to add the task to a list below the button</li>\n</ol>\n<h3>What to do</h3>\n<ol>\n  <li>Identify and fix the syntax and logic errors in both the HTML and JavaScript cells.</li>\n  <li>Fix any incorrect logic and syntax errors</li>\n  <li>Press play button of the cell changed </li>\n  <li>Test the application to ensure it works correctly (i.e., tasks can be added and removed).</li>\n  <li>Enhancing the Application: Add time stamp, Allow users to assign a priority, Enhance the UI with Style</li>\n   <li>Optional: Implement functionality to edit a task when it is clicked </li>\n</ol>\n<h3>How to submit</h3>\n<ol>\n  <li>Push the notebook to <a href='https://scribbler.live/docs#github-integration'  target='_blank'>Github</a> using <i>File->GitHub</i> (you will need a github token and a public repository to which you can push the code to). \n   <li>Copy the sharable link from the URL or from <i>File->Share/Publish</i></li>\n   <li><b>DM the link to <a href='https://www.linkedin.com/company/scribbler-live/' target='_blank'>Scribbler Linkedin Page</a></b></li>\n\n\t <li>If you are facing problems with pushing to Github, download the link using <i>File->Download NB</i> and send the file as DM to the linkedin page</li>\n  </ol>",
      "status": "",
      "output": "<h2>Instructions</h2>\nThis is a contest on JavaScript using Scribbler. For details on using Scribbler check out: <a target=\"_blank\" href=\"https://scribbler.live/docs\">Docs</a>. Follow the instructions and win badges for fastest JS coders and most innovative JS coders. \n<h3>The Application</h3>\n<ol>\n  <li>Next two cells contain HTML and JS for a To-Do application</li>\n <li>Double click on the HTML cell to see the html code</li>\n <li>Press play button at the top right corner to run the code in the cell</li>\n  <li>Enter text in the input box for Task and press button \"Add Task\"</li>\n  <li>The application is supposed to add the task to a list below the button</li>\n</ol>\n<h3>What to do</h3>\n<ol>\n  <li>Identify and fix the syntax and logic errors in both the HTML and JavaScript cells.</li>\n  <li>Fix any incorrect logic and syntax errors</li>\n  <li>Press play button of the cell changed </li>\n  <li>Test the application to ensure it works correctly (i.e., tasks can be added and removed).</li>\n  <li>Enhancing the Application: Add time stamp, Allow users to assign a priority, Enhance the UI with Style</li>\n   <li>Optional: Implement functionality to edit a task when it is clicked </li>\n</ol>\n<h3>How to submit</h3>\n<ol>\n  <li>Push the notebook to <a href=\"https://scribbler.live/docs#github-integration\" target=\"_blank\">Github</a> using <i>File-&gt;GitHub</i> (you will need a github token and a public repository to which you can push the code to). \n   </li><li>Copy the sharable link from the URL or from <i>File-&gt;Share/Publish</i></li>\n   <li><b>DM the link to <a href=\"https://www.linkedin.com/company/scribbler-live/\" target=\"_blank\">Scribbler Linkedin Page</a></b></li>\n\n\t <li>If you are facing problems with pushing to Github, download the link using <i>File-&gt;Download NB</i> and send the file as DM to the linkedin page</li>\n  </ol>",
      "type": "html"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n\n    <input type='text' id='task-input' placeholder=\"Task\"></input>\n    <input type='number' id='priority-input' placeholder=\"5\" value=5></input>\n\n<button id=\"addTaskBtn\">Add Task</button>\n    <ul id=\"taskList\">\n        <!-- Tasks will be appended here -->\n    </ul>\n    <script src=\"main.js\"></script>\n    <style>\n        /* li{\n    display: flex;\n    flex-direction: row;\n} */\n\nul{\n    list-style-type: none;\n}\n#priority-input{\n  width: 20%;\n}\n.crossBut{\n  border: 100px;\n  \n  \n  color:  \"rgb(255, 0, 0)\";\n}\n/*\n.crossBut{\n    color: red;\n  \n    position: absolute;\n    right: 5%;\n    align-self: center;\n    cursor: pointer;\n\n\n}\n*/\nli:hover{\n    opacity: 1;\n}\nli{\n    opacity: 0.8;\n}\n.taskText{\n    /* position: absolute; */\n    width: 40%;\n    left:20%;\n    /* background-color: rebeccapurple; */\n}\n.timeVal{\n    position: relative;\n    left: 20%;\n}\n\n.priorityVal{\n  margin:5%;\n}\n    </style>\n\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n\n\n\n    <input type=\"text\" id=\"task-input\" placeholder=\"Task\">\n    <input type=\"number\" id=\"priority-input\" placeholder=\"5\" value=\"5\">\n\n<button id=\"addTaskBtn\">Add Task</button>\n    <ul id=\"taskList\">\n        <!-- Tasks will be appended here -->\n    <li><span class=\"crossBut\"> |      x      | </span><span class=\"taskText\">jssjjss</span><span class=\"priorityVal\">5</span><span class=\"timeVal\">22:56, 06/07/24</span></li><li><span class=\"crossBut\"> |      x      | </span><span class=\"taskText\">msksksks</span><span class=\"priorityVal\">5</span><span class=\"timeVal\">22:56, 06/07/24</span></li></ul>\n    <script src=\"main.js\"></script>\n    <style>\n        /* li{\n    display: flex;\n    flex-direction: row;\n} */\n\nul{\n    list-style-type: none;\n}\n#priority-input{\n  width: 20%;\n}\n.crossBut{\n  border: 100px;\n  \n  \n  color:  \"rgb(255, 0, 0)\";\n}\n/*\n.crossBut{\n    color: red;\n  \n    position: absolute;\n    right: 5%;\n    align-self: center;\n    cursor: pointer;\n\n\n}\n*/\nli:hover{\n    opacity: 1;\n}\nli{\n    opacity: 0.8;\n}\n.taskText{\n    /* position: absolute; */\n    width: 40%;\n    left:20%;\n    /* background-color: rebeccapurple; */\n}\n.timeVal{\n    position: relative;\n    left: 20%;\n}\n\n.priorityVal{\n  margin:5%;\n}\n    </style>\n\n\n\n",
      "type": "html"
    },
    {
      "code": "//Click on x to delete and change priority. Click on task to edit\n\nconst getCurrentDateTime = () => {\n    const now = new Date();\n\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    const seconds = String(now.getSeconds()).padStart(2, '0');\n    const time = `${hours}:${minutes}`;\n\n    const day = String(now.getDate()).padStart(2, '0');\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const year = String(now.getFullYear()).slice(-2);\n    const date = `${day}/${month}/${year}`;\n    return `${time}, ${date}`;\n}\n\n\n\n\n\ndocument.getElementById('addTaskBtn').addEventListener('click', () => {\n    // console.log(\"Hello\")\n    const taskInput = document.getElementById('task-input').value;\n    console.log(taskInput)\n    if (taskInput !== \"\") {\n        console.log(\"Conatins something\")\n        const taskList = document.getElementById('taskList');\n\n        taskList.appendChild(createNewTaskElement(taskInput, document.getElementById(\"priority-input\").value));\n        document.getElementById('task-input').value = \"\"; // Clear input\n    } else {\n        console.log(\"Is empty\")\n        // alert(\"Task cannot be empty!\");\n    }\n});\n\n\n\nconst createNewTaskElement = (textValue, priority = 5) => {\n    const outerli = document.createElement('li')\n    const crossSymbol = document.createElement('span')\n    crossSymbol.className = \"crossBut\"\n    crossSymbol.innerText = \" |      x      | \"\n    crossSymbol.onclick = (e) => { outerli.remove() }\n    const textElement = document.createElement('span')\n    textElement.innerText = textValue\n    textElement.className = \"taskText\"\n\n    textElement.addEventListener('click', () => {\n        const inputEl = document.createElement('input');\n        inputEl.type = 'text';\n        inputEl.value = textElement.textContent;\n        inputEl.className = 'inputElEdit';\n\n        textElement.textContent = '';\n        textElement.appendChild(inputEl);\n        inputEl.focus();\n\n        inputEl.addEventListener('blur', () => {\n            textElement.textContent = inputEl.value;\n            textElement.removeChild(inputEl);\n        });\n\n        inputEl.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                inputEl.blur();\n            }\n        });\n    })\n\n    const priorityEl = document.createElement('span')\n    priorityEl.innerText = `${priority}`\n    priorityEl.className = \"priorityVal\"\n\n    const timeStamp = document.createElement('span');\n    timeStamp.className = \"timeVal\"\n\n    timeStamp.innerText = getCurrentDateTime()\n  \n\t outerli.appendChild(crossSymbol)\n    outerli.appendChild(textElement)\n    outerli.appendChild(priorityEl)\n \n    outerli.appendChild(timeStamp)\n    \n    return outerli\n}\n\n\n",
      "status": "[25]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": true
}